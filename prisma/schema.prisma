generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Account Model (OAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session Model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// User Model
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  isVerified     Boolean   @default(false)
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?
  image          String?

  accounts Account[]
  sessions Session[]

  cart   Cart?   @relation
  orders Order[]

  @@map("users")
}

// Verification Token
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Collection Model
model Collection {
  id       String    @id @default(uuid())
  title    String
  products Product[]
}

// Product Model
model Product {
  id          String @id @default(uuid())
  title       String
  description String
  price       Float

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  createdAt  DateTime       @default(now())
}

// ProductImage Model (for multiple images per product)
model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

// Cart Model (supports guest + user)
model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  cartItems CartItem[]
  createdAt DateTime   @default(now())
}

// CartItem Model
model CartItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int     @default(1)
}

// Order Model (linked to User)
model Order {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  status     OrderStatus
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
}

// OrderItem Model
model OrderItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  price     Float // Price at time of purchase
}

// Order Status Enum
enum OrderStatus {
  PENDING
  SUCCESSFUL
  FAILED
}
